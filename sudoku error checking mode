import java.util.HashSet;
import java.util.Scanner;

/**
 * Sudoku Error-Checking System
 */
public class SudokuValidator {
    
    private static final int SIZE = 9; // Standard Sudoku grid size

    /**
     * Checks if the Sudoku board follows the rules.
     */
    public static boolean isValidSudoku(int[][] board) {
        for (int i = 0; i < SIZE; i++) {
            HashSet<Integer> rowSet = new HashSet<>();
            HashSet<Integer> colSet = new HashSet<>();
            HashSet<Integer> gridSet = new HashSet<>();

            for (int j = 0; j < SIZE; j++) {
                // Check Row
                if (board[i][j] != 0) {
                    if (!rowSet.add(board[i][j])) {
                        System.out.println("❌ Duplicate " + board[i][j] + " found in Row " + (i + 1));
                        return false;
                    }
                }

                // Check Column
                if (board[j][i] != 0) {
                    if (!colSet.add(board[j][i])) {
                        System.out.println("❌ Duplicate " + board[j][i] + " found in Column " + (i + 1));
                        return false;
                    }
                }

                // Check 3x3 Grid
                int rowOffset = (i / 3) * 3;
                int colOffset = (i % 3) * 3;
                int gridVal = board[rowOffset + j / 3][colOffset + j % 3];

                if (gridVal != 0) {
                    if (!gridSet.add(gridVal)) {
                        System.out.println("❌ Duplicate " + gridVal + " found in 3x3 Grid starting at (" + (rowOffset + 1) + "," + (colOffset + 1) + ")");
                        return false;
                    }
                }
            }
        }
        return true;
    }

    /**
     * Displays the Sudoku board.
     */
    public static void displayBoard(int[][] board) {
        System.out.println("\n🎯 Current Sudoku Board:");
        for (int i = 0; i < SIZE; i++) {
            if (i % 3 == 0) System.out.println("-------------------------");
            for (int j = 0; j < SIZE; j++) {
                if (j % 3 == 0) System.out.print("| ");
                System.out.print(board[i][j] == 0 ? ". " : board[i][j] + " ");
            }
            System.out.println("|");
        }
        System.out.println("-------------------------\n");
    }

    /**
     * Allows user to input and check Sudoku entries.
     */
    public static void userInputMode() {
        Scanner scanner = new Scanner(System.in);
        int[][] board = new int[SIZE][SIZE];

        System.out.println("🎮 Enter your Sudoku board row by row (use 0 for empty cells):");
        for (int i = 0; i < SIZE; i++) {
            System.out.print("Row " + (i + 1) + ": ");
            for (int j = 0; j < SIZE; j++) {
                board[i][j] = scanner.nextInt();
            }
        }

        displayBoard(board);
        if (isValidSudoku(board)) {
            System.out.println("✅ No errors found! Your Sudoku board follows the rules.");
        } else {
            System.out.println("⚠️ Sudoku board contains errors! Please correct them.");
        }

        scanner.close();
    }

    public static void main(String[] args) {
        System.out.println("\n🔍 Welcome to Sudoku Error-Checking Mode!");
        userInputMode();
    }
}
